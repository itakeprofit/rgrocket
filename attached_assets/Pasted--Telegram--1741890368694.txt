Создать многопользовательское приложение, позволяющее массово проверять наличие Telegram-аккаунтов по списку телефонных номеров с разделением списков на части по 500 номеров для обхода ограничений.

2. Функциональные требования
2.1. Основной функционал
Импорт номеров: Возможность загрузки списка телефонных номеров (например, из файла CSV, TXT или через веб-интерфейс).
Разбиение списка: Автоматическое разделение списка номеров на части, каждая из которых содержит не более 500 номеров.
Проверка наличия аккаунта:
Для каждого номера выполняется запрос через Telethon для проверки наличия Telegram-аккаунта.
Если аккаунт существует – возвращать информацию о пользователе (например, ID, имя, username и т.д.).
Если аккаунта нет – помечать номер как несуществующий.
Параллельная обработка: Возможность одновременно обрабатывать несколько списков (многопользовательский режим).
Логирование: Запись логов проверок, ошибок и результатов для каждого пользователя и каждого запроса.
2.2. Специфические требования к Telethon
Использование библиотеки Telethon для взаимодействия с Telegram API.
Учесть, что в текущей версии Telethon метод DeleteContactsRequest ожидает параметр с именем id, а не contacts.
Внимание: При вызове метода следует передавать id=input_users.
3. Нефункциональные требования
3.1. Масштабируемость и производительность
Приложение должно корректно работать при большом количестве одновременных запросов.
Обработка каждого блока из 500 номеров должна происходить независимо для минимизации риска блокировки или превышения лимитов Telegram API.
3.2. Безопасность
Обеспечить авторизацию и аутентификацию пользователей.
Обработка данных должна осуществляться с соблюдением правил защиты персональных данных.
При выполнении запросов к Telegram API необходимо учитывать ограничения и лимиты, а также реализовать обработку ошибок (например, тайм-ауты, превышение лимитов, ошибки соединения).
3.3. Пользовательский интерфейс
Веб-интерфейс: Должен содержать страницу для загрузки списка номеров, отображения статуса обработки, результатов проверки и логов.
Администрирование: Возможность для администратора просматривать активность пользователей, историю проверок и управлять очередями заданий.
4. Архитектура приложения
4.1. Компоненты системы
Frontend: Веб-интерфейс (например, на основе React, Angular или другого современного фреймворка).
Backend: REST API или GraphQL сервер, реализующий бизнес-логику. Рекомендуется использовать Python (с учетом интеграции Telethon) или другой язык с удобной поддержкой Telegram API.
База данных: СУБД для хранения пользователей, логов проверок, результатов (рекомендуются PostgreSQL, MySQL или SQLite в зависимости от нагрузки).
Очередь заданий: Для распределения задач проверки номеров (например, Celery для Python).
Авторизация: Модуль для управления сессиями и правами доступа пользователей.
4.2. Взаимодействие компонентов
Пользователь загружает список телефонных номеров через веб-интерфейс.
Backend принимает список, разделяет его на блоки по 500 номеров и ставит задачи в очередь.
Worker-процессы обрабатывают очереди, используя Telethon для проверки наличия аккаунтов.
Результаты проверки сохраняются в базе данных.
Пользователь получает уведомление (в режиме реального времени или по завершению) о результатах проверки.
5. Технические детали реализации
5.1. Работа с Telethon
Настройка сессии: Обеспечить корректное создание и управление сессиями для каждого пользователя (при необходимости, поддержка нескольких API-ключей).
Метод DeleteContactsRequest: При необходимости удаления контактов следует использовать следующий синтаксис:
python
Копировать
Редактировать
from telethon.tl.functions.contacts import DeleteContactsRequest
result = client(DeleteContactsRequest(id=input_users))
где input_users – список объектов или идентификаторов пользователей.
5.2. Обработка ограничений Telegram API
Реализовать логику разбиения списка номеров на части по 500 номеров.
Для каждой части обеспечить последовательное или параллельное выполнение запросов с учетом лимитов.
Реализовать механизм повторных попыток в случае ошибки (например, превышение лимита запросов).
5.3. Многопользовательский режим
Каждый пользователь должен иметь свою учетную запись с возможностью просмотра истории проверок.
Реализовать разграничение доступа к данным, чтобы пользователи не имели доступа к результатам проверок других пользователей.
Обеспечить одновременную работу нескольких пользователей без взаимного влияния.
5.4. Логирование и мониторинг
Вести подробное логирование операций: входящие запросы, обработка блоков, результаты, ошибки.
Предусмотреть возможность экспорта логов и их мониторинга для выявления проблем.
6. Тестирование и отладка
6.1. Юнит-тесты
Написать тесты для проверки корректности разделения списка номеров.
Тестировать корректность работы Telethon-интеграции, включая передачу параметров (проверка использования id вместо contacts).
6.2. Интеграционное тестирование
Проверить корректность взаимодействия между компонентами (Frontend, Backend, очередь заданий, база данных).
6.3. Нагрузочное тестирование
Провести тесты с имитацией большого количества запросов для оценки производительности и устойчивости системы.
7. Развертывание и поддержка
7.1. Среда развертывания
Возможное использование Docker-контейнеров для упрощения деплоя.
Настроить CI/CD для автоматизированного тестирования и развертывания.
7.2. Документация
Предоставить подробную документацию по установке, настройке и использованию приложения.
Описать процессы обновления и резервного копирования данных.
8. Дополнительные требования
Юзабилити: Интерфейс должен быть интуитивно понятным и удобным для конечных пользователей.
Масштабируемость: Возможность легкого добавления новых функциональных возможностей (например, расширение формата загружаемых данных, дополнительные виды проверок).